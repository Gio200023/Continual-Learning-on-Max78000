import numpy as np

flatten_layer = [127, 127, 127, 68, 127, 127, 127, 127, 62, 24, 11, 0, 0, 0, 0, 0, 11, 8, 25, 58, 94, 105, 52, 98, 99, 127, 38, 43, 60, 127, 36, 0, 127, 127, 127, 110, 113, 107, 86, 59, 0, 0, 0, 34, 0, 0, 0, 29, 0, 15, 3, 36, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 17, 0, 0, 0, 59, 91, 0, 0, 49, 45, 0, 0, 52, 15, 33, 57, 0, 0, 22, 0, 0, 9, 0, 0, 46, 2, 0, 24, 127, 127, 109,
                 0, 127, 127, 127, 0, 89, 64, 46, 52, 56, 73, 127, 115, 127, 127, 93, 66, 127, 127, 105, 10, 127, 81, 0, 0, 56, 0, 12, 51, 0, 0, 32, 0, 0, 0, 0, 0, 44, 127, 109, 127, 48, 127, 127, 127, 0, 34, 47, 35, 0, 0, 0, 53, 52, 0, 0, 0, 0, 0, 0, 0, 82, 100, 126, 101, 104, 127, 127, 20, 127, 127, 127, 59, 86, 127, 127, 29, 61, 127, 127, 127, 111, 127, 127, 127, 127, 127, 74, 0, 113, 86, 2, 0]

output_channel_9 =[25,57,84,49,22,90,29,51,60,81,83,43,20,74,38,25,-17,-2,74,105,-59,-82,9,59,51,2,-101,-81,83,64,-88,-94,-62,-84,-15,-21,-75,-116,-99,-61,26,-31,-96,-45,-33,-44,-102,-20,42,96,98,52,88,110,98,31,72,97,29,1,27,35,-40,-60,113,87,26,-27,44,7,-79,-89,-6,-32,-40,-40,1,-4,18,1,32,99,93,7,-17,29,26,23,4,-57,-88,-24,0,-62,-61,-54,-64,-103,-44,10,-128,-128,-114,10,-80,-111,-46,44,13,45,90,72,4,100,92,48,-26,78,102,74,37,48,27,-15,20,-2,-54,-25,-25,-70,-90,-39,10,32,25,24,73,82,120,65,63,123,125,72,-37,-46,45,30,-77,-55,-30,-35,-64,-105,-71,-45,-8,-63,-113,-70,-15,-10,-47,-31,-77,-115,-112,-88,-32,-59,-77,-61,23,42,26,-26,-49,-29,55,48,-13,22,-6,-34,-37,49,32,-15,28,86,16,-26]

output_channel_8=[77,70,53,22,-10,-94,-128,-76,-88,-128,-128,-78,-88,-128,-108,-15,-45,-85,-28,-21,-63,-11,43,-1,-45,50,124,113,-110,-49,113,120,-36,-44,-17,0,-7,-56,-51,-13,-62,-84,-86,-65,-47,-59,-45,-51,-8,33,61,60,27,68,65,54,71,101,84,94,66,101,122,78,13,39,51,28,-91,-58,9,56,-70,-92,4,30,-20,-83,-35,-22,-12,32,48,52,-45,22,42,49,1,67,97,35,52,120,93,43,4,-15,-26,-19,33,39,-13,-6,32,12,-16,-23,-8,20,7,-11,40,23,20,-21,81,9,-42,-67,122,56,-33,-34,79,46,33,12,-9,-9,4,10,-16,-15,13,34,-16,-71,-95,-62,-9,-78,-127,-98,22,33,47,63,-2,17,35,66,2,32,60,78,-13,21,63,61,-42,-70,-88,-47,-45,-86,-51,16,-40,-4,33,57,-65,-52,-19,4,-42,-42,44,35,-15,-33,5,71,-25,-71,12,100,-69,-117,26,86]

output_channel_7=[39,88,74,59,33,-31,-58,36,-4,-19,-6,-1,-49,-102,-121,-71,-7,-56,-82,-24,67,12,-29,-11,47,77,46,-29,5,46,3,-7,122,125,109,53,59,102,84,13,-45,-56,-66,-66,-101,-128,-127,-83,-41,-38,-76,-74,-46,-90,-128,-97,-80,-124,-109,-50,-53,-79,-84,-50,-17,-26,-30,-13,7,-5,-23,-18,-11,13,-27,-50,23,14,-35,-19,29,39,52,10,-40,-116,-107,-67,-123,-128,-127,-66,-79,-110,-84,-25,71,120,65,-23,15,29,1,-12,-15,29,-12,-14,-6,-3,-32,17,56,53,44,31,60,56,95,56,-30,-8,-12,-33,31,18,-18,-28,-64,-58,-14,-11,3,50,64,28,86,123,103,81,86,113,120,123,-7,-25,-5,5,-34,-38,24,-60,-79,-85,-38,-37,-23,-50,-50,-58,-3,47,40,-16,93,127,114,-12,67,82,31,-31,72,70,29,41,41,40,122,87,53,43,92,64,-19,11,-6,0,-9,10,-41,-34]

output_channel_6=[-121,-119,-116,-60,-73,-5,125,111,-54,42,124,84,-5,40,51,33,46,79,41,32,33,66,30,56,-28,-37,-4,43,-6,-7,-20,11,-21,-31,-63,-60,-1,-16,7,-21,-9,14,60,39,9,53,86,41,-14,-66,-71,-5,-23,-14,39,72,-11,27,125,120,-8,16,89,109,-50,-33,24,34,100,103,127,111,48,97,127,108,19,66,90,58,-11,10,-50,-6,84,55,-7,9,60,83,0,-10,25,25,6,12,-36,-36,-53,-7,7,-33,-61,-57,-12,-48,-38,-61,-6,-35,-23,-25,-88,-116,-72,-14,-107,-105,-60,-22,-125,-122,-61,-37,-115,-125,-39,-23,83,126,68,23,-10,61,-14,-42,-21,-5,-74,-89,-35,-41,-62,-60,-13,-2,-19,-53,-24,43,84,67,-16,56,102,75,1,14,57,39,-2,8,62,47,-17,-13,2,16,-37,-87,-53,-32,-5,-58,-50,-35,22,-31,-101,-23,25,-26,-5,46,11,-76,-40,5,-26,-103,-30,3]

output_channel_5=[-3,-72,-116,-118,55,56,79,40,71,63,97,99,51,74,95,50,-13,28,-57,-93,-2,36,20,-6,21,34,29,84,20,5,44,37,-46,-32,9,29,-10,36,84,76,33,59,86,82,47,58,47,33,-6,-82,-126,-102,-9,17,-9,13,-6,43,28,33,-36,3,55,19,-18,78,126,122,-81,-84,49,72,-89,-84,-22,-62,-77,-55,-11,-30,-25,-38,0,32,-54,-51,62,65,-46,-81,-61,-49,-35,-48,-32,-52,-75,-96,-78,72,-39,-105,-39,76,4,-55,-47,30,-11,-25,-27,-18,24,6,-7,33,47,22,-43,46,115,49,-31,9,55,34,11,-26,-16,10,-17,-45,-2,9,-12,-17,-38,-39,-30,-58,-49,-79,-72,-59,-7,8,-85,-87,-19,-35,-68,-71,5,1,-26,-8,0,33,74,52,-32,-84,30,104,-69,-59,19,118,-52,-38,0,62,-22,-33,-12,-34,-48,-127,-128,-78,-65,-59,-36,24,41,84,107,49,62,108,101,48]

output_channel_4=[19,-26,-15,-33,61,77,21,-31,62,65,-3,-55,-25,-16,-18,-7,-20,-38,-25,-44,-88,-122,-106,-75,2,-29,-70,-70,50,37,-32,-40,-37,-56,-60,-25,-56,-39,-80,-55,-32,-45,-88,-81,-27,-56,-81,-61,-5,-22,-4,-23,-62,-63,-58,-41,7,-2,-75,-79,-1,3,-60,-55,-69,-51,-17,-2,-59,-61,16,6,-44,-36,-27,20,-19,12,45,53,-11,-16,5,23,68,60,56,53,72,39,33,10,23,-7,5,16,30,61,22,-9,61,74,12,-33,39,58,-30,-35,-45,-52,-57,-43,-45,-61,-21,-32,0,-45,-26,-16,96,85,53,-7,8,-2,-19,-10,30,82,123,103,16,47,127,88,57,87,127,127,31,127,127,121,124,127,124,63,88,118,101,58,62,49,29,3,67,75,-30,-83,-39,-63,-26,-7,-91,-102,-76,-32,-4,-31,-56,10,68,100,41,12,-36,-56,-91,-80,-38,-69,-80,-57,39,11,-20,-50,5,32,-28,-43]

output_channel_3=[31,28,-40,-10,16,8,-49,-89,42,81,12,-62,43,72,22,-22,-16,-37,-12,-56,23,30,-26,-45,-22,-27,45,66,22,-16,37,51,71,57,-25,-83,36,49,-53,-80,63,86,36,-12,104,109,38,-16,-4,46,119,91,3,31,118,67,-56,-15,108,67,-34,-21,53,34,-45,-94,-87,-36,-41,-32,-41,-21,-45,-34,-93,-52,-47,-17,-52,-31,-4,-53,-101,-83,-29,-55,-91,-71,-44,-84,-101,-67,-22,-61,-64,-43,71,45,36,-39,-7,-15,-14,-49,-41,-26,-42,-90,4,-11,-45,-45,13,-71,-106,-113,-4,-21,-65,-86,-28,70,87,48,41,94,79,41,-33,-55,-42,-15,-25,-57,-69,-66,-38,-77,-95,-77,-36,-78,-82,-44,-15,-11,16,-3,111,49,4,-18,84,47,-17,-43,-33,-40,25,29,69,86,-4,-19,80,69,39,15,46,13,18,12,-12,-38,-8,18,116,126,86,48,113,80,68,64,51,61,122,107,43,103,121,80]

output_channel_2=[7,31,19,59,17,-30,-58,-43,8,28,-5,-31,25,22,12,-4,-19,-33,-4,-5,-31,-48,-96,-109,-81,-124,-119,-102,-55,-71,-53,-32,42,60,51,60,25,59,105,72,-91,-69,25,23,-50,-39,42,43,18,20,34,35,41,47,4,-33,90,65,-8,-105,73,52,-19,-20,30,-24,-102,-70,112,127,58,35,127,127,127,127,116,100,97,82,-29,-115,-60,-11,-54,-68,-45,-4,-4,30,101,124,-14,21,60,60,18,7,40,8,22,68,64,38,-12,6,56,60,-20,-57,-46,-20,32,11,-9,5,113,63,-17,-64,41,32,-44,-20,-2,24,-42,-16,-20,-55,-45,-56,-42,-128,-128,-87,-35,-63,-118,-44,-10,-15,-48,-58,-30,-72,-44,1,41,50,34,68,45,54,29,5,48,15,-71,-62,71,70,6,-29,123,126,83,19,69,96,93,51,-21,16,-4,23,8,62,39,-6,-60,21,-34,-99,-60,-60,-127,-93,-38,-60,-122,-85]

output_channel_1=[-53,-68,-26,-18,-50,-43,-8,0,9,-56,-56,-7,30,-3,20,12,52,109,80,31,80,126,127,49,55,108,49,-9,2,32,6,-23,-23,-19,-50,-35,42,-6,-69,-41,114,81,12,-5,54,61,10,11,-1,10,3,-6,-8,-39,-28,-21,-37,-73,-55,-45,-29,-42,-48,-35,-28,-19,-32,-22,-32,-17,-38,-35,-22,2,-33,-31,-20,-44,-37,-20,-6,-46,-89,-61,26,10,-39,-44,36,58,74,52,-2,51,42,39,-27,-3,4,-1,75,127,127,90,126,127,127,126,94,127,127,100,-38,-33,-51,-31,-71,-36,-74,-51,-43,-30,-60,-13,4,-4,-21,8,43,39,37,14,23,60,76,35,-74,-29,49,43,-26,-15,15,11,-20,-48,-64,-32,-44,-100,-126,-63,-25,-16,-93,-104,-6,-6,-48,-61,-10,9,20,6,23,46,15,-39,39,89,36,-27,-8,-5,-6,-17,13,18,-35,-38,28,21,-36,-41,43,41,-48,-62,49,15,-43,-15]

output_channel_0=[-16,44,94,46,-69,-28,12,-7,-107,-69,-11,9,-3,9,11,-1,37,36,11,73,37,-23,14,81,-1,-46,-23,-17,-11,-40,-13,-47,-22,-17,64,82,-11,-10,65,113,1,44,115,126,41,74,126,104,17,2,-11,-28,-14,-72,-74,-45,-53,-116,-124,-34,-8,-69,-75,-25,70,40,-11,-46,41,19,-120,-115,35,30,-118,-122,23,13,-80,-73,40,89,104,40,62,106,109,-15,52,119,75,-28,52,73,37,0,12,13,33,8,-15,-9,-10,-54,-60,-96,-74,-71,-15,-56,-47,-26,4,82,112,94,-89,-22,124,125,-126,-126,73,101,-114,-83,69,69,8,-37,-34,17,45,-17,-49,5,5,-6,-29,17,-16,-77,-84,-23,-29,-42,-35,13,-42,-54,-56,-12,-14,-32,23,78,-34,1,94,115,0,6,5,-9,-48,-57,-36,-38,-58,-57,-23,-45,-33,-42,2,10,-23,9,60,4,-28,1,32,-34,-45,-50,-28,-42,-47,-63,-13,-14]

bias = [22, 28, -28, -35, 19, -9, -32, -10, 31,  8]

kernels_layer4_firstLine = [0xf0, 0x2c, 0x5e, 0x2e, 0xbb, 0xe4, 0x0c, 0xf9, 0x95, 0xbb, 0xf5, 0x09, 0xfd, 0x09, 0x0b, 0xff, 0x25, 0x24, 0x0b, 0x49, 0x25, 0xe9, 0x0e, 0x51, 0xff, 0xd2, 0xe9, 0xef, 0xf5, 0xd8, 0xf3, 0xd1, 0xea, 0xef, 0x40, 0x52, 0xf5, 0xf6, 0x41, 0x71, 0x01, 0x2c, 0x73, 0x7e, 0x29, 0x4a, 0x7e, 0x68, 0x11, 0x02, 0xf5, 0xe4, 0xf2, 0xb8, 0xb6, 0xd3, 0xcb, 0x8c, 0x84, 0xde, 0xf8, 0xbb, 0xb5, 0xe7, 0x46, 0x28, 0xf5, 0xd2, 0x29, 0x13, 0x88, 0x8d, 0x23, 0x1e, 0x8a, 0x86, 0x17, 0x0d, 0xb0, 0xb7, 0x28, 0x59, 0x68, 0x28, 0x3e, 0x6a, 0x6d, 0xf1, 0x34, 0x77, 0x4b, 0xe4, 0x34, 0x49,
                            0x25, 0x00, 0x0c, 0x0d, 0x21, 0x08, 0xf1, 0xf7, 0xf6, 0xca, 0xc4, 0xa0, 0xb6, 0xb9, 0xf1, 0xc8, 0xd1, 0xe6, 0x04, 0x52, 0x70, 0x5e, 0xa7, 0xea, 0x7c, 0x7d, 0x82, 0x82, 0x49, 0x65, 0x8e, 0xad, 0x45, 0x45, 0x08, 0xdb, 0xde, 0x11, 0x2d, 0xef, 0xcf, 0x05, 0x05, 0xfa, 0xe3, 0x11, 0xf0, 0xb3, 0xac, 0xe9, 0xe3, 0xd6, 0xdd, 0x0d, 0xd6, 0xca, 0xc8, 0xf4, 0xf2, 0xe0, 0x17, 0x4e, 0xde, 0x01, 0x5e, 0x73, 0x00, 0x06, 0x05, 0xf7, 0xd0, 0xc7, 0xdc, 0xda, 0xc6, 0xc7, 0xe9, 0xd3, 0xdf, 0xd6, 0x02, 0x0a, 0xe9, 0x09, 0x3c, 0x04, 0xe4, 0x01, 0x20, 0xde, 0xd3, 0xce, 0xe4, 0xd6, 0xd1, 0xc1, 0xf3, 0xf2]

Kernels_layer4_0_mod2 = [-16, 44, 94, 46, -69, -28, 12, -7, -107, -69, -11, 9, -3, 9, 11, -1, 37, 36, 11, 73, 37, -23, 14, 81, -1, -46, -23, -17, -11, -40, -13, -47, -22, -17, 64, 82, -11, -10, 65, 113, 1, 44, 115, 126, 41, 74, 126, 104, 17, 2, -11, -28, -14, -72, -74, -45, -53, -116, -124, -34, -8, -69, -75, -25, 70, 40, -11, -46, 41, 19, -120, -115, 35, 30, -118, -122, 23, 13, -80, -73, 40, 89, 104, 40, 62, 106, 109, -15, 52, 119, 75, -28, 52,
                         73, 37, 0, 12, 13, 33, 8, -15, -9, -10, -54, -60, -96, -74, -71, -15, -56, -47, -26, 4, 82, 112, 94, -89, -22, 124, 125, -126, -126, 73, 101, -114, -83, 69, 69, 8, -37, -34, 17, 45, -17, -49, 5, 5, -6, -29, 17, -16, -77, -84, -23, -29, -42, -35, 13, -42, -54, -56, -12, -14, -32, 23, 78, -34, 1, 94, 115, 0, 6, 5, -9, -48, -57, -36, -38, -58, -57, -23, -45, -33, -42, 2, 10, -23, 9, 60, 4, -28, 1, 32, -34, -45, -50, -28, -42, -47, -63, -13, -14]

def mod2(val):
    """Mod2 function
       Transform each hex value into their corrispondent value according to the Maxim formula

    Args:
        val (_type_): Hex to trasnform

    Returns:
        int: 8 bit value in mod2
    """    
    return -((val >> 7) & 0b1)*2**7 + ((val >> 6) & 0b1)*2**6 + ((val >> 5) & 0b1)*2**5 + ((val >> 4) & 0b1)*2**4 + ((val >> 3) & 0b1)*2**3 + ((val >> 2) & 0b1)*2**2 + ((val >> 1) & 0b1)*2**1 + ((val >> 0) & 0b1)*2**0

def maxim_mult(a,b):
    """Multiplication formula from maxim (not used)

    Args:
        a (int)
        b (int)

    Returns:
        int: number floored according to maxim formula
    """    
    sign=np.sign(a)*np.sign(b)
    mult= int((abs(a)/128 * abs(b)/128)) >>7
    # print(mult)
    # time.sleep(2)
    floored_number = np.floor(0.5 + mult)
    return floored_number * sign

# *****
# Multiply flatten with every output channels + bias to find softmax result (circa)
# *****
count = 0
print("Output of multiplication: [", end='')
for list in [output_channel_0, output_channel_1, output_channel_2, output_channel_3, output_channel_4, output_channel_5, output_channel_6, output_channel_7, output_channel_8, output_channel_9]:
    print(sum(np.multiply(flatten_layer, list))+bias[count], end=',')
    count += 1
print("]")