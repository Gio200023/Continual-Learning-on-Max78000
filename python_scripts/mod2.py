#
# Translate hex values (weights) into mod2 values using math formulas given by Maxim
# w = (-a_7 2^7+a_6 2^6+a_5 2^5+a_4 2^4+a_3 2^3+a_2 2^2+a_1 2^1+a_0)/128
#

import numpy as np

SAMPLE_OUTPUT_LAYER_0=[ 0x007f0b7f, 0x0f7f087f, 0x037f197f, 0x246e3a44, 0x00715e7f, 0x006b697f, 0x0056347f, 0x3d3b627f, 0x0000633e, 0x00007f18, 0x0000260b, 0x00222b00, 0x00003c00,  0x00007f00, 0x00002400, 0x001d0000, 0x7f7f3400, 0x7f7f0f00, 0x5d6d2100, 0x4200392a, 0x7f7f0011, 0x7f7f0000, 0x697f1600, 0x0a000000, 0x7f59003b, 0x5140095b, 0x002e0000, 0x00340000, 0x38382e31, 0x0049022d, 0x0c7f0000, 0x33731800, 0x3d520000, 0x7f642200, 0x7f7e2f20, 0x7f652300, 0x6f680000, 0x7f7f0000, 0x7f7f0000, 0x7f143500, 0x7f7f342c, 0x7f7f007f, 0x4a7f006d, 0x003b007f, 0x71560030, 0x567f007f, 0x027f007f,  0x001d007f ]

sample_mod2=[127,11,127,0,127,8,127,15,127,25,127,3,68,58,110,36,127,94,113,0,127,105,107,0,127,52,86,0,127,98,59,61,62,99,0,0,24,127,0,0,11,38,0,0,0,43,34,0,0,60,0,0,0,127,0,0,0,36,0,0,0,0,29,0,0,52,127,127,0,15,127,127,0,33,109,93,42,57,0,66,17,0,127,127,0,0,127,127,0,22,127,105,0,0,0,10,59,0,89,127,91,9,64,81,0,0,46,0,0,0,52,0,49,46,56,56,45,2,73,0,0,0,127,12,0,24,115,51,0,0,82,61,0,34,100,127,32,47,126,127,0,35,101,127,0,0,104,111,0,0,127,127,0,0,127,127,0,53,20,127,44,52,127,127,127,0,127,127,109,0,127,74,127,0,59,0,48,0,86,113,127,0,127,86,127,0,127,2,127,0,29,0]

flatten = [127,127,127,68,127,127,127,127,62,24,11,0,0,0,0,0,11,8,25,58,94,105,52,98,99,127,38,43,60,127,36,0,127,127,127,110,113,107,86,59,0,0,0,34,0,0,0,29,0,15,3,36,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,42,17,0,0,0,59,91,0,0,49,45,0,0,52,15,33,57,0,0,22,0,0,9,0,0,46,2,0,24,127,127,109,0,127,127,127,0,89,64,46,52,56,73,127,115,127,127,93,66,127,127,105,10,127,81,0,0,56,0,12,51,0,0,32,0,0,0,0,0,44,127,109,127,48,127,127,127,0,34,47,35,0,0,0,53,52,0,0,0,0,0,0,0,82,100,126,101,104,127,127,20,127,127,127,59,86,127,127,29,61,127,127,127,111,127,127,127,127,127,74,0,113,86,2,0]

kernels_layer4_0=[0xf0,0x2c,0x5e,0x2e,0xbb,0xe4,0x0c,0xf9,0x95,0xbb,0xf5,0x09,0xfd,0x09,0x0b,0xff,0x25,0x24,0x0b,0x49,0x25,0xe9,0x0e,0x51,0xff,0xd2,0xe9,0xef,0xf5,0xd8,0xf3,0xd1,0xea,0xef,0x40,0x52,0xf5,0xf6,0x41,0x71,0x01,0x2c,0x73,0x7e,0x29,0x4a,0x7e,0x68,0x11,0x02,0xf5,0xe4,0xf2,0xb8,0xb6,0xd3,0xcb,0x8c,0x84,0xde,0xf8,0xbb,0xb5,0xe7,0x46,0x28,0xf5,0xd2,0x29,0x13,0x88,0x8d,0x23,0x1e,0x8a,0x86,0x17,0x0d,0xb0,0xb7,0x28,0x59,0x68,0x28,0x3e,0x6a,0x6d,0xf1,0x34,0x77,0x4b,0xe4,0x34,0x49,0x25,0x00,0x0c,0x0d,0x21,0x08,0xf1,0xf7,0xf6,0xca,0xc4,0xa0,0xb6,0xb9,0xf1,0xc8,0xd1,0xe6,0x04,0x52,0x70,0x5e,0xa7,0xea,0x7c,0x7d,0x82,0x82,0x49,0x65,0x8e,0xad,0x45,0x45,0x08,0xdb,0xde,0x11,0x2d,0xef,0xcf,0x05,0x05,0xfa,0xe3,0x11,0xf0,0xb3,0xac,0xe9,0xe3,0xd6,0xdd,0x0d,0xd6,0xca,0xc8,0xf4,0xf2,0xe0,0x17,0x4e,0xde,0x01,0x5e,0x73,0x00,0x06,0x05,0xf7,0xd0,0xc7,0xdc,0xda,0xc6,0xc7,0xe9,0xd3,0xdf,0xd6,0x02,0x0a,0xe9,0x09,0x3c,0x04,0xe4,0x01,0x20,0xde,0xd3,0xce,0xe4,0xd6,0xd1,0xc1,0xf3,0xf2]

kernels_layer4_1=[0xcb,0xbc,0xe6,0xee,0xce,0xd5,0xf8,0x00,0x09,0xc8,0xc8,0xf9,0x1e,0xfd,0x14,0x0c,0x34,0x6d,0x50,0x1f,0x50,0x7e,0x7f,0x31,0x37,0x6c,0x31,0xf7,0x02,0x20,0x06,0xe9,0xe9,0xed,0xce,0xdd,0x2a,0xfa,0xbb,0xd7,0x72,0x51,0x0c,0xfb,0x36,0x3d,0x0a,0x0b,0xff,0x0a,0x03,0xfa,0xf8,0xd9,0xe4,0xeb,0xdb,0xb7,0xc9,0xd3,0xe3,0xd6,0xd0,0xdd,0xe4,0xed,0xe0,0xea,0xe0,0xef,0xda,0xdd,0xea,0x02,0xdf,0xe1,0xec,0xd4,0xdb,0xec,0xfa,0xd2,0xa7,0xc3,0x1a,0x0a,0xd9,0xd4,0x24,0x3a,0x4a,0x34,0xfe,0x33,0x2a,0x27,0xe5,0xfd,0x04,0xff,0x4b,0x7f,0x7f,0x5a,0x7e,0x7f,0x7f,0x7e,0x5e,0x7f,0x7f,0x64,0xda,0xdf,0xcd,0xe1,0xb9,0xdc,0xb6,0xcd,0xd5,0xe2,0xc4,0xf3,0x04,0xfc,0xeb,0x08,0x2b,0x27,0x25,0x0e,0x17,0x3c,0x4c,0x23,0xb6,0xe3,0x31,0x2b,0xe6,0xf1,0x0f,0x0b,0xec,0xd0,0xc0,0xe0,0xd4,0x9c,0x82,0xc1,0xe7,0xf0,0xa3,0x98,0xfa,0xfa,0xd0,0xc3,0xf6,0x09,0x14,0x06,0x17,0x2e,0x0f,0xd9,0x27,0x59,0x24,0xe5,0xf8,0xfb,0xfa,0xef,0x0d,0x12,0xdd,0xda,0x1c,0x15,0xdc,0xd7,0x2b,0x29,0xd0,0xc2,0x31,0x0f,0xd5,0xf1]

Kernels_layer4_0_mod2=[-16,44,94,46,-69,-28,12,-7,-107,-69,-11,9,-3,9,11,-1,37,36,11,73,37,-23,14,81,-1,-46,-23,-17,-11,-40,-13,-47,-22,-17,64,82,-11,-10,65,113,1,44,115,126,41,74,126,104,17,2,-11,-28,-14,-72,-74,-45,-53,-116,-124,-34,-8,-69,-75,-25,70,40,-11,-46,41,19,-120,-115,35,30,-118,-122,23,13,-80,-73,40,89,104,40,62,106,109,-15,52,119,75,-28,52,73,37,0,12,13,33,8,-15,-9,-10,-54,-60,-96,-74,-71,-15,-56,-47,-26,4,82,112,94,-89,-22,124,125,-126,-126,73,101,-114,-83,69,69,8,-37,-34,17,45,-17,-49,5,5,-6,-29,17,-16,-77,-84,-23,-29,-42,-35,13,-42,-54,-56,-12,-14,-32,23,78,-34,1,94,115,0,6,5,-9,-48,-57,-36,-38,-58,-57,-23,-45,-33,-42,2,10,-23,9,60,4,-28,1,32,-34,-45,-50,-28,-42,-47,-63,-13,-14]

Kernels_layer4_1_mod2=[-53,-68,-26,-18,-50,-43,-8,0,9,-56,-56,-7,30,-3,20,12,52,109,80,31,80,126,127,49,55,108,49,-9,2,32,6,-23,-23,-19,-50,-35,42,-6,-69,-41,114,81,12,-5,54,61,10,11,-1,10,3,-6,-8,-39,-28,-21,-37,-73,-55,-45,-29,-42,-48,-35,-28,-19,-32,-22,-32,-17,-38,-35,-22,2,-33,-31,-20,-44,-37,-20,-6,-46,-89,-61,26,10,-39,-44,36,58,74,52,-2,51,42,39,-27,-3,4,-1,75,127,127,90,126,127,127,126,94,127,127,100,-38,-33,-51,-31,-71,-36,-74,-51,-43,-30,-60,-13,4,-4,-21,8,43,39,37,14,23,60,76,35,-74,-29,49,43,-26,-15,15,11,-20,-48,-64,-32,-44,-100,-126,-63,-25,-16,-93,-104,-6,-6,-48,-61,-10,9,20,6,23,46,15,-39,39,89,36,-27,-8,-5,-6,-17,13,18,-35,-38,28,21,-36,-41,43,41,-48,-62,49,15,-43,-15]

def mod2(val):
  return -((val >> 7) & 0b1)*2**7 + ((val >> 6) & 0b1)*2**6 + ((val >> 5) & 0b1)*2**5 + ((val >> 4) & 0b1)*2**4 + ((val >> 3) & 0b1)*2**3 + ((val >> 2) & 0b1)*2**2 + ((val >> 1) & 0b1)*2**1 + ((val >> 0) & 0b1)*2**0

def transform_mod2(list,name):
  print(str(name),end='=[')
  for h in list: 
    print(mod2((h >> 0) & 0xff), end=',' )
    print(mod2((h >> 8) & 0xff), end=',')
    print(mod2((h >> 16) & 0xff), end=',')
    print(mod2((h >> 24) & 0xff), end=',')
  print("]")

first = [0xd7b1ecef, 0xeb34376b]
print(transform_mod2(first,"first"))
# second = 0x03
# print(mod2(second))
# print("kernel=",end='[')
# for h in range(len(kernels_layer4_1)):
#   if(h%4==0):
#     print(str(hex(kernels_layer4_1[h-3]))+str(hex(kernels_layer4_1[h-2]))+str(hex(kernels_layer4_1[h-1]))+str(hex(kernels_layer4_1[h])),end=',')
    
# for h in range(len(kernels_layer4_1)):
#   if h%4==0:
#     print(kernels_layer4_1[h])

# for h in range(len(kernels_layer4_1)):
#   if h%4==0:
#     print(f'{kernels_layer4_0[0]:x}')
# print(np.multiply(flatten,Kernels_layer4_0_mod2),end=',')

# print(transform_mod2(SAMPLE_OUTPUT_LAYER_0,"sample"))
# print(sum(np.multiply(sample_mod2,Kernels_layer4_0_mod2)))